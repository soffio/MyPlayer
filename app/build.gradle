//    repositories {
//
//        libs(PrebuiltLibraries) {
//            ffmpeg {
//                headers.srcDir "src/main/jni/ffmpeg"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("src/main/jni/ffmpeg/libffmpeg.so")
//                }
//            }
//        }
//    }

//    android {
//
//
//        ndk {
//            moduleName "ffmpegPlayer"
//            ldLibs.addAll(['log','android','OpenSLES'])
//            cppFlags.add("-I${file("src/main/jni/ffmpeg")}".toString())
//            cppFlags.addAll(['-std=c++11', '-Wall', '-fno-exceptions', '-fno-rtti'])
//            stl "stlport_static"
//            abiFilters.addAll(["armeabi-v7a"])
//        }
//
//        sources {
//            main {
//                jni {
//                    dependencies {
//                        library "ffmpeg" linkage "shared"
//                    }
//                }
//
//                jniLibs {
//                    dependencies {
//                        library "ffmpeg"
//                    }
//                }
//            }
//        }
//    }


apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.1"
    defaultConfig {
        applicationId "com.leon.myplayer"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                // Sets a flag to enable format macro constants for the C++ compiler.
//                cppFlags "-D__STDC_FORMAT_MACROS"
                arguments '-DANDROID_STL=gnustl_static'
            }
        }

        ndk {
            abiFilters 'armeabi-v7a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['distribution/ffmpeg/lib']
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }


}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
